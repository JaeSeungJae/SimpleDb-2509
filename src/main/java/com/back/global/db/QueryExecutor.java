package com.back.global.db;

import com.back.global.db.mapper.BaseRowMapper;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class QueryExecutor {
    private final SimpleDb simpleDb;

    public QueryExecutor(SimpleDb simpleDb) {
        this.simpleDb = simpleDb;
    }

    @FunctionalInterface
    public interface CheckedFunction<T, R> {
        R apply(T t) throws SQLException;
    }

    private void bindParams(PreparedStatement pstmt, List<Object> params) throws SQLException {
        for (int i = 0; i < params.size(); i++) {
            pstmt.setObject(i + 1, params.get(i));
        }
    }

    private <R> R executeCommonQuery(String query, List<Object> params, int autoGeneratedKeys, CheckedFunction<PreparedStatement, R> callback) {
        try (Connection conn = simpleDb.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query, autoGeneratedKeys)) {
            bindParams(pstmt, params);
            return callback.apply(pstmt);
        } catch (SQLException e) {
            throw new RuntimeException("SQL문 실행 실패: " + query, e);
        }
    }

    public long executeUpdate(String query, List<Object> params, boolean returnGeneratedKeys) {
        return executeCommonQuery(query, params,
                returnGeneratedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS,
                pstmt -> {
                    pstmt.executeUpdate();
                    if (!returnGeneratedKeys) return (long) pstmt.getUpdateCount();

                    try (ResultSet rs = pstmt.getGeneratedKeys()) {
                        return rs.next() ? rs.getLong(1) : -1L;
                    }
                });
    }

    private <R> R executeSelectQuery(String query, List<Object> params, CheckedFunction<ResultSet, R> callback) {
        return executeCommonQuery(query, params, ResultSet.TYPE_FORWARD_ONLY, pstmt -> {
            try (ResultSet rs = pstmt.executeQuery()) {
                return callback.apply(rs);
            }
        });
    }

    public <T> List<T> executeSelectList(String query, List<Object> params, BaseRowMapper<T> mapper) {
        return executeSelectQuery(query, params, rs -> {
            List<T> results = new ArrayList<>();
            while (rs.next()) {
                results.add(mapper.mapRow(rs));
            }
            return results;
        });
    }

    public <T> T executeSelectOne(String query, List<Object> params, BaseRowMapper<T> mapper) {
        return executeSelectQuery(query, params, rs -> {
            if (rs.next()) return mapper.mapRow(rs);
            return null;
        });
    }
}
